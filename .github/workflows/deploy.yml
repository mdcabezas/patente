name: Deploy React App to GitHub Pages

# Definir cuándo se ejecuta el workflow
on:
  # Se ejecuta en push a la rama master
  push:
    branches: [ master ]
  
  # Se ejecuta en pull requests hacia master
  pull_request:
    branches: [ master ]
  
  # Permite ejecución manual desde la interfaz de GitHub
  workflow_dispatch:

# Configurar permisos necesarios para GitHub Pages
permissions:
  contents: write  # Cambiado de 'read' a 'write' para poder hacer push
  pages: write
  id-token: write

# Evitar ejecuciones concurrentes del mismo workflow
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job para construir la aplicación
  build:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Checkout del código fuente
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necesario para acceder al historial completo
    
    # 2. Configurar Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    # 3. Instalar dependencias
    - name: Install dependencies
      run: npm ci
    
    # 4. Construir la aplicación React
    - name: Build React app
      run: npm run build
    
    # 5. Verificar que el directorio dist existe
    - name: Verify build directory
      run: |
        if [ ! -d "dist" ]; then
          echo "Error: dist directory not found"
          exit 1
        fi
        echo "Build directory contents:"
        ls -la dist/
    
    # 6. Configurar GitHub Pages
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    # 7. Subir artefactos para GitHub Pages
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'
  
  # Job para desplegar a GitHub Pages
  deploy:
    # Solo se ejecuta si el build fue exitoso
    needs: build
    
    # Solo se ejecuta en push a master (no en PRs)
    if: github.ref == 'refs/heads/master'
    
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    # 8. Desplegar a GitHub Pages
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Job adicional para crear/actualizar la rama gh-pages (opcional)
  create-gh-pages-branch:
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
    # 1. Checkout del código
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: true  # Mantener credenciales para push
        token: ${{ secrets.GITHUB_TOKEN }}
    
    # 2. Configurar Git
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    # 3. Descargar el artefacto construido
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: github-pages
        path: ./pages-artifact
    
    # 4. Extraer el contenido del artefacto
    - name: Extract artifact
      run: |
        cd pages-artifact
        tar -xf artifact.tar
        cd ..
    
    # 5. Crear o actualizar la rama gh-pages
    - name: Create/Update gh-pages branch
      run: |
        # Crear directorio temporal para el contenido
        mkdir -p temp-gh-pages
        cp -r pages-artifact/* temp-gh-pages/ 2>/dev/null || true
        
        # Verificar si la rama gh-pages existe
        if git show-ref --quiet refs/heads/gh-pages; then
          echo "Branch gh-pages exists, switching to it"
          git checkout gh-pages
        else
          echo "Creating new gh-pages branch"
          git checkout --orphan gh-pages
        fi
        
        # Limpiar el contenido actual
        git rm -rf . 2>/dev/null || true
        
        # Copiar el nuevo contenido
        cp -r temp-gh-pages/* . 2>/dev/null || true
        
        # Agregar archivos al staging
        git add .
        
        # Verificar si hay cambios para commitear
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Deploy: Update GitHub Pages content from ${{ github.sha }}"
          
          # Configurar la URL remota con token para autenticación
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          # Push con manejo de errores
          if git push origin gh-pages; then
            echo "Successfully updated gh-pages branch"
          else
            echo "Failed to push to gh-pages branch"
            exit 1
          fi
        fi